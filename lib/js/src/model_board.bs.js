// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

var Player = /* module */[];

var Status = /* module */[];

function countFilled(cells) {
  var cellToList = $$Array.to_list(cells);
  var cells$1 = $$Array.concat(cellToList);
  var result = $$Array.map((function (cell) {
          if (cell !== "") {
            return 1;
          } else {
            return 0;
          }
        }), cells$1);
  return $$Array.fold_right((function (prim, prim$1) {
                return prim + prim$1 | 0;
              }), result, 0);
}

function checker(cells) {
  var patterns_000 = /* tuple */[
    Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 0), 0),
    Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 0), 1),
    Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 0), 2)
  ];
  var patterns_001 = /* :: */[
    /* tuple */[
      Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 1), 0),
      Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 1), 1),
      Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 1), 2)
    ],
    /* :: */[
      /* tuple */[
        Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 2), 0),
        Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 2), 1),
        Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 2), 2)
      ],
      /* :: */[
        /* tuple */[
          Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 0), 0),
          Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 1), 0),
          Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 2), 0)
        ],
        /* :: */[
          /* tuple */[
            Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 0), 1),
            Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 1), 1),
            Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 2), 1)
          ],
          /* :: */[
            /* tuple */[
              Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 0), 2),
              Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 1), 2),
              Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 2), 2)
            ],
            /* :: */[
              /* tuple */[
                Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 0), 0),
                Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 1), 1),
                Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 2), 2)
              ],
              /* :: */[
                /* tuple */[
                  Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 0), 2),
                  Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 1), 1),
                  Caml_array.caml_array_get(Caml_array.caml_array_get(cells, 2), 0)
                ],
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]
  ];
  var patterns = /* :: */[
    patterns_000,
    patterns_001
  ];
  var hasWinner = List.filter((function (pattern) {
            if (Caml_obj.caml_equal(pattern, /* tuple */[
                    "X",
                    "X",
                    "X"
                  ])) {
              return true;
            } else {
              return Caml_obj.caml_equal(pattern, /* tuple */[
                          "O",
                          "O",
                          "O"
                        ]);
            }
          }))(patterns);
  if (hasWinner !== /* [] */0) {
    return /* Winner */1;
  } else if (countFilled(cells) === 9 && hasWinner === /* [] */0) {
    return /* Draw */0;
  } else {
    return /* Ongoing */2;
  }
}

var Game = /* module */[
  /* countFilled */countFilled,
  /* checker */checker
];

var initial_state_001 = /* move */$$Array.make_matrix(3, 3, "");

var initial_state = /* record */[
  /* turn : Cross */1,
  initial_state_001,
  /* status : Ongoing */2,
  /* winner */""
];

function moveReducer(state, action) {
  if (action) {
    if (action[0]) {
      var match = action[1];
      Caml_array.caml_array_set(Caml_array.caml_array_get(state[/* move */1], match[0]), match[1], "X");
      var match$1 = checker(state[/* move */1]);
      var tmp;
      switch (match$1) {
        case 1 : 
            tmp = "X";
            break;
        case 0 : 
        case 2 : 
            tmp = "";
            break;
        
      }
      return /* record */[
              /* turn : Circle */0,
              /* move */state[/* move */1],
              /* status */checker(state[/* move */1]),
              /* winner */tmp
            ];
    } else {
      var match$2 = action[1];
      Caml_array.caml_array_set(Caml_array.caml_array_get(state[/* move */1], match$2[0]), match$2[1], "O");
      var match$3 = checker(state[/* move */1]);
      var tmp$1;
      switch (match$3) {
        case 1 : 
            tmp$1 = "O";
            break;
        case 0 : 
        case 2 : 
            tmp$1 = "";
            break;
        
      }
      return /* record */[
              /* turn : Cross */1,
              /* move */state[/* move */1],
              /* status */checker(state[/* move */1]),
              /* winner */tmp$1
            ];
    }
  } else {
    return state;
  }
}

var State = /* module */[
  /* initial_state */initial_state,
  /* moveReducer */moveReducer
];

exports.Player = Player;
exports.Status = Status;
exports.Game = Game;
exports.State = State;
/* initial_state Not a pure module */
